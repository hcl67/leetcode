'''
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if p.val < q.val:
            sml = p
            lrg = q
        else:
            sml = q
            lrg = p
        cur = root
        while(1):
            if cur.val == sml.val or cur.val == lrg.val or (cur.val > sml.val and cur.val < lrg.val):
                return cur
            elif cur.val > lrg.val:
                cur = cur.left
            elif cur.val < sml.val:
                cur = cur.right
            else:
                print("error")
                return
        
